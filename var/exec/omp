#!/bin/bash

#SBATCH -J omp
#SBATCH -o %j.log

function puts() { 
  echo \[$(date +%Y/%m/%dT%H:%M:%S)\] "$@"
}

uid=$(id -u)

puts JOB CONFIGURATION ----------------------
scontrol show job -d -o $SLURM_JOB_ID
puts JOB CONFIGURATION END ------------------

puts JOB ENVIRONMENT ------------------------
env | grep ^SLURM
puts JOB ENVIRONMENT END --------------------

puts CGROUP maxmem:$(cat /sys/fs/cgroup/memory/slurm/uid_$uid/job_$SLURM_JOB_ID/memory.limit_in_bytes) cpuid\(s\):$(cat /sys/fs/cgroup/cpuset/slurm/uid_$uid/job_$SLURM_JOB_ID/cpuset.cpus)

puts NUMA CONFIGURATION ----------------------
lscpu | grep -e '^Model name' -e '^NUMA node[0-9]'
puts NUMA CONFIGURATION END ------------------

if [ -n "$SLURM_JOB_CPUS_PER_NODE" ]; then
  omp_threads=$SLURM_JOB_CPUS_PER_NODE
else
  omp_threads=1
fi
export OMP_NUM_THREADS=$omp_threads
export OMP_PROC_BIND=true
#  print out at runtime OpenMP specification
export OMP_DISPLAY_ENV=true

command="srun $@"
puts EXEC $command
$command &
# The process ID of the last spawned child process
child=$!
sleep 5 # wait for start-up

puts PROCESSES -------------------------------
ps -u $USER -o user,ppid,pid,tid,cpuid,args -T
puts PROCESSES END ---------------------------

puts WAIT PID $child
wait $child
# Exit signal of the child process 
state=$?
puts EXIT $state 
# Propagate last signal to the system
exit $state
